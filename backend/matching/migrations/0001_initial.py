# Generated by Django 5.2.4 on 2025-09-29 07:29

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchingAlgorithmConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('skill_weight', models.FloatField(default=0.4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('experience_weight', models.FloatField(default=0.3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('education_weight', models.FloatField(default=0.2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('location_weight', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('algorithm_params', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=False)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.FloatField(help_text='总体匹配分数 (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('skill_match_score', models.FloatField(help_text='技能匹配分数', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('experience_match_score', models.FloatField(help_text='经验匹配分数', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('education_match_score', models.FloatField(help_text='教育背景匹配分数', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('location_match_score', models.FloatField(help_text='地理位置匹配分数', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('match_details', models.JSONField(blank=True, default=dict)),
                ('recommendation_reasons', models.JSONField(blank=True, default=list)),
                ('improvement_suggestions', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('is_viewed_by_student', models.BooleanField(default=False)),
                ('is_viewed_by_employer', models.BooleanField(default=False)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-overall_score', '-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('recommendation_reasons', models.JSONField(blank=True, default=list)),
                ('is_clicked', models.BooleanField(default=False)),
                ('is_applied', models.BooleanField(default=False)),
                ('is_saved', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('saved_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-recommendation_score'],
            },
        ),
        migrations.CreateModel(
            name='SkillMatchDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=100)),
                ('student_has_skill', models.BooleanField(default=False)),
                ('student_proficiency', models.CharField(blank=True, max_length=20)),
                ('student_experience_years', models.DecimalField(decimal_places=1, default=0.0, max_digits=4)),
                ('job_requires_skill', models.BooleanField(default=False)),
                ('job_skill_importance', models.CharField(blank=True, max_length=20)),
                ('job_min_experience', models.DecimalField(decimal_places=1, default=0.0, max_digits=4)),
                ('job_skill_weight', models.FloatField(default=1.0)),
                ('match_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('is_missing_skill', models.BooleanField(default=False)),
                ('is_bonus_skill', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-match_score', 'skill_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommended_skills', models.JSONField(blank=True, default=list)),
                ('career_suggestions', models.JSONField(blank=True, default=list)),
                ('based_on_applications', models.BooleanField(default=False)),
                ('based_on_saved_jobs', models.BooleanField(default=False)),
                ('based_on_profile_similarity', models.BooleanField(default=False)),
                ('based_on_market_trends', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(help_text='推荐置信度 (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('min_match_score', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('max_results_per_student', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('pending', '待处理'), ('running', '运行中'), ('completed', '已完成'), ('failed', '失败'), ('cancelled', '已取消')], default='pending', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_matches_found', models.IntegerField(default=0)),
                ('execution_time_seconds', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('algorithm_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matching.matchingalgorithmconfig')),
                ('target_jobs', models.ManyToManyField(blank=True, to='jobs.job')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
